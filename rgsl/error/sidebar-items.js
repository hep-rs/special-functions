initSidebarItems({"fn":[["erf","This routine computes the error function erf(x), where erf(x) = (2/\\sqrt(\\pi)) \\int_0^x dt \\exp(-t^2)."],["erf_Q","This routine computes the upper tail of the Gaussian probability function Q(x) = (1/\\sqrt{2\\pi}) \\int_x^\\infty dt \\exp(-t^2/2)."],["erf_Q_e","This routine computes the upper tail of the Gaussian probability function Q(x) = (1/\\sqrt{2\\pi}) \\int_x^\\infty dt \\exp(-t^2/2)."],["erf_Z","This routine computes the Gaussian probability density function Z(x) = (1/\\sqrt{2\\pi}) \\exp(-x^2/2)."],["erf_Z_e","This routine computes the Gaussian probability density function Z(x) = (1/\\sqrt{2\\pi}) \\exp(-x^2/2)."],["erf_e","This routine computes the error function erf(x), where erf(x) = (2/\\sqrt(\\pi)) \\int_0^x dt \\exp(-t^2)."],["erfc","This routine computes the complementary error function erfc(x) = 1 - erf(x) = (2/\\sqrt(\\pi)) \\int_x^\\infty \\exp(-t^2)."],["erfc_e","This routine computes the complementary error function erfc(x) = 1 - erf(x) = (2/\\sqrt(\\pi)) \\int_x^\\infty \\exp(-t^2)."],["hazard","This routine computes the hazard function for the normal distribution."],["hazard_e","This routine computes the hazard function for the normal distribution."],["log_erfc","This routine computes the logarithm of the complementary error function \\log(\\erfc(x))."],["log_erfc_e","This routine computes the logarithm of the complementary error function \\log(\\erfc(x))."],["set_error_handler","`f` is the type of GSL error handler functions. An error handler will be passed four arguments which specify the reason for the error (a string), the name of the source file in which it occurred (also a string), the line number in that file (an integer) and the error number (an integer). The source file and line number are set at compile time using the FILE and LINE directives in the preprocessor. An error handler function returns type void. Error handler functions should be defined like this,"],["set_error_handler_off","This function turns off the error handler by defining an error handler which does nothing. This will cause the program to continue after any error, so the return values from any library routines must be checked. This is the recommended behavior for production programs. The previous handler is returned (so that you can restore it later)."],["str_error",""]]});