#![allow(clippy::all)]

use crate::approximations::polynomial;
use std::convert::identity;

approx_fn! {
    fn _lower(mod = lower, type = chebyshev, outer = identity, inner = identity);
}
approx_fn! {
    fn _upper(mod = upper, type = chebyshev, outer = identity, inner = identity);
}

#[inline]
pub(crate) fn eval(x: f64) -> f64 {
    if x < 0.0 {
        _lower(x)
    } else {
        _upper(x)
    }
}

pub(crate) mod lower {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x.recip(),
            &[
                -1.992466003705296,
                -1.,
                -0.00390625,
                -0.0001524157902758726,
                -0.0000152587890625,
                -2.56e-6,
                -5.953741807651273e-7,
                -1.734665255574303e-7,
                -5.960464477539062e-8,
                -2.323057312541877e-8,
                -1e-8,
            ],
        ) + polynomial(
            (-x).ln(),
            &[
                0.0,
                0.0,
                -0.985551091297435,
                0.0,
                -0.07891940245810383,
                0.0,
                -0.002284630648400314,
                0.0,
                -0.0000248015873015873,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.00390625,
                0.0001524157902758726,
                0.0000152587890625,
                2.56e-6,
                5.953741807651273e-7,
                1.734665255574303e-7,
                5.960464477539062e-8,
                2.323057312541877e-8,
                1e-8,
            ],
        )
    }

    pub const COEFFICIENTS: [&[f64]; 1] = [&[
        -2.091882936427921,
        1.898987098754233,
        0.005985096757530648,
        0.0001508852631766846,
        8.310094088768812e-6,
        6.889606209149829e-7,
        7.357492012895724e-8,
        9.34263310886156e-9,
        1.346302801757463e-9,
        2.137205246325306e-10,
        3.662948182471481e-11,
        6.681522132565272e-12,
        1.283480249385187e-12,
        2.575618374318761e-13,
        5.365778160677928e-14,
        1.154729015973654e-14,
        2.556664875680176e-15,
        5.804662723140351e-16,
        1.347703615991593e-16,
        3.192423629222249e-17,
        7.700182488899706e-18,
        1.888006691527462e-18,
        4.698889620172626e-19,
        1.185565249052556e-19,
        3.029087892824935e-20,
        7.829431686421044e-21,
        2.045569752924993e-21,
        5.399676205935332e-22,
        1.445331962824122e-22,
        4.146959448400994e-23,
        1.04577280556437e-23,
    ]];

    pub const SPLITS: [f64; 2] = [-4.041331533848258, -0.186886226761277];
}

pub(crate) mod upper {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.00390625,
                0.0001524157902758726,
                0.0000152587890625,
                2.56e-6,
                5.953741807651273e-7,
                1.734665255574303e-7,
                5.960464477539062e-8,
                2.323057312541877e-8,
                1e-8,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        if x == 1.0 {
            return 1.004077356197944;
        }

        let xm1 = x - 1.0;
        let ln = (-xm1).ln();
        polynomial(
            xm1,
            &[
                1.004077356197944,
                1.008349277381923,
                0.004496892301263156,
                0.0002661873256446935,
                0.00005978001618009206,
                0.00003771295008208875,
                0.00007346691048770843,
                -0.0003391635433460853,
                0.0006549281693495776,
                -0.000960897240015144,
                0.001231225889294637,
            ],
        ) + ln
            * polynomial(
                xm1,
                &[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0001984126984126984,
                    0.0006944444444444444,
                    -0.00150462962962963,
                    0.002604166666666667,
                ],
            )
    }

    pub const COEFFICIENTS: [&[f64]; 1] = [&[
        0.5649532291450466,
        0.3816374298112132,
        0.0003032663873502467,
        2.730935388901747e-6,
        7.211822475368888e-8,
        3.597073002996048e-9,
        2.752237059931561e-10,
        2.869566401464407e-11,
        3.781696160116952e-12,
        5.985188757342339e-13,
        1.096822269741676e-13,
        2.265439281680906e-14,
        5.167080205922903e-15,
        1.280953402958995e-15,
        3.408706287401342e-16,
        9.63980076177791e-17,
        2.87370666663273e-17,
        8.970522956438425e-18,
        2.916033169024052e-18,
        9.82551681307018e-19,
        3.41828290630154e-19,
        1.223783104940544e-19,
        4.495784380047184e-20,
        1.690607637803899e-20,
        6.493753864138638e-21,
        2.543306011964508e-21,
        1.0145917708027e-21,
        4.129940765950044e-22,
        1.743376830012682e-22,
        8.310718828258038e-23,
        2.973184514516004e-23,
    ]];

    pub const SPLITS: [f64; 2] = [0.1834839350006041, 0.943278539331821];
}
