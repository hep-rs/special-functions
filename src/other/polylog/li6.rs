#![allow(clippy::all)]

use crate::approximations::polynomial;
use std::convert::identity;

approx_fn! {
    fn _lower(mod = lower, type = chebyshev, outer = identity, inner = identity);
}
approx_fn! {
    fn _upper(mod = upper, type = chebyshev, outer = identity, inner = identity);
}

#[inline]
pub(crate) fn eval(x: f64) -> f64 {
    if x < 0.0 {
        _lower(x)
    } else {
        _upper(x)
    }
}

pub(crate) mod lower {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x.recip(),
            &[
                -1.97110218259487,
                -1.,
                -0.015625,
                -0.001371742112482853,
                -0.000244140625,
                -0.000064,
                -0.00002143347050754458,
                -8.499859752314087e-6,
                -3.814697265625e-6,
                -1.881676423158921e-6,
                -1e-6,
            ],
        ) + polynomial(
            (-x).ln(),
            &[
                0.0,
                0.0,
                -0.947032829497246,
                0.0,
                -0.06853891945200943,
                0.0,
                -0.001388888888888889,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.015625,
                0.001371742112482853,
                0.000244140625,
                0.000064,
                0.00002143347050754458,
                8.499859752314087e-6,
                3.814697265625e-6,
                1.881676423158921e-6,
                1e-6,
            ],
        )
    }

    pub const COEFFICIENTS: [&[f64]; 1] = [&[
        -2.927740958482764,
        2.767768390433409,
        0.04174515766927705,
        0.0026677931465636,
        0.000294911620434717,
        0.00004368148566609166,
        7.776907671679243e-6,
        1.572549786194277e-6,
        3.492434755951517e-7,
        8.336940757952904e-8,
        2.107803239092077e-8,
        5.584819669163733e-9,
        1.538644398037931e-9,
        4.381432387894083e-10,
        1.283536811719819e-10,
        3.853825779347583e-11,
        1.18236324832661e-11,
        3.697442618146632e-12,
        1.176090501143371e-12,
        3.798464255526968e-13,
        1.243815759220831e-13,
        4.12410057585536e-14,
        1.383079513638613e-14,
        4.686961677428379e-15,
        1.603601426727778e-15,
        5.535397800066671e-16,
        1.926816397828821e-16,
        6.769022660319229e-17,
        2.424813601918453e-17,
        9.57033500407103e-18,
        3.032800514513107e-18,
    ]];

    pub const SPLITS: [f64; 2] = [-6.066481965674086, -0.1154172892321217];
}

pub(crate) mod upper {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.015625,
                0.001371742112482853,
                0.000244140625,
                0.000064,
                0.00002143347050754458,
                8.499859752314087e-6,
                3.814697265625e-6,
                1.881676423158921e-6,
                1e-6,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        if x == 1.0 {
            return 1.017343061984449;
        }

        let xm1 = x - 1.0;
        let ln = (-xm1).ln();
        polynomial(
            xm1,
            &[
                1.017343061984449,
                1.03692775514337,
                0.02269773928388413,
                0.004823785385486594,
                0.00485757032720672,
                -0.01103259405565969,
                0.0135164276261639,
                -0.01404093828680292,
                0.01363669589331404,
                -0.01282751308222969,
                0.01187199414277106,
            ],
        ) + ln
            * polynomial(
                xm1,
                &[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.008333333333333333,
                    0.02083333333333333,
                    -0.03472222222222222,
                    0.04861111111111111,
                    -0.06186342592592593,
                    0.07421875,
                ],
            )
    }

    pub const COEFFICIENTS: [&[f64]; 1] = [&[
        0.5421201232514338,
        0.4296252664497231,
        0.001646021000216828,
        0.00004220467708191404,
        2.54941415882014e-6,
        2.553928392405098e-7,
        3.58385489766343e-8,
        6.397568987790397e-9,
        1.367151704600219e-9,
        3.357438972570843e-10,
        9.2064205984543e-11,
        2.760267473650318e-11,
        8.907530935903126e-12,
        3.056821015027999e-12,
        1.105078748782361e-12,
        4.177067909262878e-13,
        1.640891798153387e-13,
        6.666144792022396e-14,
        2.789236535089325e-14,
        1.197938334964471e-14,
        5.265969124724692e-15,
        2.363531895889714e-15,
        1.080895226712845e-15,
        5.02781548317841e-16,
        2.375337533562208e-16,
        1.138766938972026e-16,
        5.543393823246223e-17,
        2.756122446323667e-17,
        1.434472921579136e-17,
        8.483659104925209e-18,
        3.411719230807745e-18,
    ]];

    pub const SPLITS: [f64; 2] = [0.1138962355702049, 0.957618055956716];
}
