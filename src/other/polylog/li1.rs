#![allow(clippy::all)]

use crate::approximations::polynomial;
use std::convert::identity;

approx_fn! {
    fn _lower(mod = lower, type = chebyshev, outer = identity, inner = identity);
}
approx_fn! {
    fn _upper(mod = upper, type = chebyshev, outer = identity, inner = identity);
}

#[inline]
pub(crate) fn eval(x: f64) -> f64 {
  if x < 0.0 {
    _lower(x)
  } else {
    _upper(x)
  }
}


pub(crate) mod lower {
use super::*;

pub fn lower(x: f64) -> f64 {
    polynomial(
        x.recip(),
        &[0.0, 1., 0.5, 0.3333333333333333, 0.25, 0.2, 0.1666666666666667, 0.1428571428571429, 0.125, 0.1111111111111111, 0.1],
      )
    + polynomial(
        (-x).ln(),
        &[0.0, -1.],
      )
}

pub fn upper(x: f64) -> f64 {
      polynomial(
        x,
        &[0.0, 1., 0.5, 0.3333333333333333, 0.25, 0.2, 0.1666666666666667, 0.1428571428571429, 0.125, 0.1111111111111111, 0.1],
      )
}

pub const COEFFICIENTS: [&[f64]; 4] = [
    &[-2.709385290876263, 0.318844124164121, 0.02541539387849635, 0.002701183000491777, 0.0003229711229995549, 0.00004119097793723827, 5.47229220160932e-6, 7.477749489395455e-7, 1.043103462915936e-7, 1.478166266871081e-8, 2.120870829282562e-9, 3.073760009217416e-10, 4.491897290969126e-11, 6.610223342650333e-12, 9.78542904957695e-13, 1.456012392278504e-13, 2.176129668694436e-14, 3.265158391917346e-15, 4.916194903160075e-16, 7.424999327928268e-17, 1.124523268625426e-17, 1.707369698509759e-18, 2.598200163422931e-19, 3.962012787236585e-20, 6.053142382872336e-21, 9.26404269974305e-22, 1.4200896638944e-22, 2.18011532305821e-23, 3.353305975084644e-24, 5.281302677840192e-25, 7.949895324257148e-26],
    &[-2.084418205281544, 0.2978298199575895, 0.02217565041399254, 0.002201523323413948, 0.0002458797356418038, 0.00002929212695896725, 3.635028707651696e-6, 4.639799766602459e-7, 6.045684439928333e-8, 8.002600481174469e-9, 1.07253587722532e-9, 1.451968941873056e-10, 1.982015055817794e-11, 2.724476248742055e-12, 3.767354827978741e-13, 5.236142847288565e-14, 7.310060069438312e-15, 1.024542999698813e-15, 1.440936325379112e-16, 2.03283381959058e-17, 2.875833019838717e-18, 4.078613478698365e-19, 5.797587972451094e-20, 8.258104522733845e-21, 1.178515104539957e-21, 1.684785325051663e-22, 2.412400965854415e-23, 3.459402184944332e-24, 4.969674319091906e-25, 7.290487320202481e-26, 1.02814469689542e-26],
    &[-1.514602387241583, 0.2632728342103182, 0.01732814630828342, 0.001520676730064279, 0.0001501323272406382, 0.00001581030531969351, 1.734343288019242e-6, 1.956880598273434e-7, 2.253971568269006e-8, 2.637375480034031e-9, 3.12457192877411e-10, 3.73915866991982e-11, 4.511919961046091e-12, 5.48245825788329e-13, 6.701417932823237e-14, 8.233406031210385e-15, 1.016077566113009e-15, 1.258849979332206e-16, 1.565043620104065e-17, 1.951737487235876e-18, 2.44073743452079e-19, 3.059904104521473e-20, 3.844859578680071e-21, 4.841181679400394e-22, 6.10722652057607e-23, 7.717760817608219e-24, 9.76863895206451e-25, 1.238287572051858e-25, 1.572228046310914e-26, 2.030117094615217e-27, 2.542086557803933e-28],
    &[-0.721606459684995, 0.5818349488379283, 0.08463297692230867, 0.01641414126586435, 0.003581370391366016, 0.000833506583372047, 0.0002020680251218131, 0.00005038724531079915, 0.00001282621388015317, 3.316773109663666e-6, 8.68416530655679e-7, 2.296704944018446e-7, 6.124723016494454e-8, 1.644728262899323e-8, 4.443030357518639e-9, 1.206384825684369e-9, 3.29023524998868e-10, 9.00881815690315e-11, 2.47522136872244e-11, 6.821859308372286e-12, 1.885368176807888e-12, 5.22368141340438e-13, 1.450584742177207e-13, 4.036526111777785e-14, 1.125367236565745e-14, 3.142943322638968e-15, 8.792020865953909e-16, 2.464145876759035e-16, 6.952484157242343e-17, 2.094341180275747e-17, 5.457616303655647e-18],
];

pub const SPLITS: [f64; 5] = [-19.19083135639621, -9.61272853686085, -4.823677127093165, -2.429151422209324, -0.03462571732548394];
}

pub(crate) mod upper {
use super::*;

pub fn lower(x: f64) -> f64 {
      polynomial(
        x,
        &[0.0, 1., 0.5, 0.3333333333333333, 0.25, 0.2, 0.1666666666666667, 0.1428571428571429, 0.125, 0.1111111111111111, 0.1],
      )
}

pub fn upper(x: f64) -> f64 {
      if x == 1.0 {
        return std::f64::INFINITY
      }

      (x - 1.0).ln()
  }

pub const COEFFICIENTS: [&[f64]; 1] = [
    &[0.3372016949288747, 0.3260695270126017, 0.02658033411155544, 0.002889012323863935, 0.000353257080740959, 0.00004607454769242277, 6.259794155578272e-6, 8.747691940738523e-7, 1.247905650936244e-7, 1.808462246031706e-8, 2.653579931326676e-9, 3.932961604990097e-10, 5.877753430531783e-11, 8.845644373800903e-12, 1.33913700007608e-12, 2.037708251692781e-13, 3.114537027277222e-14, 4.779085248694204e-15, 7.358705314474599e-16, 1.136581371149614e-16, 1.760371612984922e-17, 2.733350186725744e-18, 4.25375142124034e-19, 6.633567762421706e-20, 1.036439561947522e-20, 1.622166532150607e-21, 2.542977263287428e-22, 3.992443565020452e-23, 6.280387803762383e-24, 1.012570283253263e-24, 1.557095594631319e-25],
];

pub const SPLITS: [f64; 2] = [0.0345260576878705, 0.5];
}