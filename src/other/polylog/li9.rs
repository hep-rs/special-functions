#![allow(clippy::all)]

use crate::approximations::polynomial;
use std::convert::identity;

approx_fn! {
    fn _lower(mod = lower, type = chebyshev, outer = identity, inner = identity);
}
approx_fn! {
    fn _upper(mod = upper, type = chebyshev, outer = identity, inner = identity);
}

#[inline]
pub(crate) fn eval(x: f64) -> f64 {
    if x < 0.0 {
        _lower(x)
    } else {
        _upper(x)
    }
}

pub(crate) mod lower {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x.recip(),
            &[
                0.0,
                1.,
                0.001953125,
                0.00005080526342529086,
                3.814697265625e-6,
                5.12e-7,
                9.92290301275212e-8,
                2.478093222249005e-8,
                7.450580596923828e-9,
                2.581174791713197e-9,
                1e-9,
            ],
        ) + polynomial(
            (-x).ln(),
            &[
                0.0,
                -1.992466003705296,
                0.0,
                -0.3285170304324784,
                0.0,
                -0.01578388049162077,
                0.0,
                -0.0003263758069143306,
                0.0,
                -2.755731922398589e-6,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.001953125,
                0.00005080526342529086,
                3.814697265625e-6,
                5.12e-7,
                9.92290301275212e-8,
                2.478093222249005e-8,
                7.450580596923828e-9,
                2.581174791713197e-9,
                1e-9,
            ],
        )
    }

    pub const COEFFICIENTS: [&[f64]; 1] = [&[
        -1.762796858411894,
        1.522965554917204,
        0.002043722130451284,
        0.00003049936262794263,
        1.131128941929444e-6,
        6.73929059852293e-8,
        5.374774101169991e-9,
        5.227223128616258e-10,
        5.872926778202859e-11,
        7.36592925698551e-12,
        1.007721416408905e-12,
        1.479355947380836e-13,
        2.302420526863904e-14,
        3.76445976317289e-15,
        6.420032262487321e-16,
        1.135627728562074e-16,
        2.074044158925004e-17,
        3.896356790864852e-18,
        7.505998071816448e-19,
        1.478880009149084e-19,
        2.973509528416534e-20,
        6.089658219104365e-21,
        1.26821124208091e-21,
        2.681921553116986e-22,
        5.751938063758008e-23,
        1.249737258460573e-23,
        2.748145706940667e-24,
        6.111607468098127e-25,
        1.376759257854201e-25,
        3.279216765847652e-26,
        7.129947390260664e-27,
    ]];

    pub const SPLITS: [f64; 2] = [-3.303558298018915, -0.2378657135965581];
}

pub(crate) mod upper {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.001953125,
                0.00005080526342529086,
                3.814697265625e-6,
                5.12e-7,
                9.92290301275212e-8,
                2.478093222249005e-8,
                7.450580596923828e-9,
                2.581174791713197e-9,
                1e-9,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        if x == 1.0 {
            return 1.002008392826082;
        }

        let xm1 = x - 1.0;
        let ln = (-xm1).ln();
        polynomial(
            xm1,
            &[
                1.002008392826082,
                1.004077356197944,
                0.002135960591989244,
                0.00007499037242822299,
                0.00001030405209000613,
                3.712761564013511e-6,
                3.191523710336866e-6,
                7.759681175098176e-6,
                -0.00004608496553377315,
                0.0001054670146350001,
                -0.0001769558043687817,
            ],
        ) + ln
            * polynomial(
                xm1,
                &[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.0000248015873015873,
                    0.0000992063492063492,
                    -0.0002397486772486772,
                ],
            )
    }

    pub const COEFFICIENTS: [&[f64]; 1] = [&[
        0.5823182760789534,
        0.349530948254239,
        0.0001247331819511271,
        6.585879841739899e-7,
        1.135109148737526e-8,
        3.930119507037553e-10,
        2.177727362281346e-11,
        1.697732472624126e-12,
        1.715806766456057e-13,
        2.125899359518873e-14,
        3.102431409694026e-15,
        5.176520711377663e-16,
        9.65412075377306e-17,
        1.977301106510223e-17,
        4.385920825783754e-18,
        1.041867371499073e-18,
        2.626467121539308e-19,
        6.974067131585359e-20,
        1.938440144834234e-20,
        5.610548113566882e-21,
        1.683564934180147e-21,
        5.217893273170795e-22,
        1.664954969027481e-22,
        5.454370299971339e-23,
        1.830101487865527e-23,
        6.276156434744927e-24,
        2.196369238026737e-24,
        7.844654726496691e-25,
        2.891251071579842e-25,
        1.190831877542223e-25,
        3.896191660404603e-26,
    ]];

    pub const SPLITS: [f64; 2] = [0.2328049050741094, 0.930240300933697];
}
