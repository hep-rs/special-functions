#![allow(clippy::all)]

use crate::approximations::polynomial;
use std::convert::identity;

approx_fn! {
    fn _lower(mod = lower, type = chebyshev, outer = identity, inner = identity);
}
approx_fn! {
    fn _upper(mod = upper, type = chebyshev, outer = identity, inner = identity);
}

#[inline]
pub(crate) fn eval(x: f64) -> f64 {
    if x < 0.0 {
        _lower(x)
    } else {
        _upper(x)
    }
}

pub(crate) mod lower {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x.recip(),
            &[
                0.0,
                1.,
                0.03125,
                0.00411522633744856,
                0.0009765625,
                0.00032,
                0.0001286008230452675,
                0.00005949901826619861,
                0.000030517578125,
                0.00001693508780843029,
                1e-5,
            ],
        ) + polynomial(
            (-x).ln(),
            &[
                0.0,
                -1.894065658994492,
                0.0,
                -0.2741556778080377,
                0.0,
                -0.008333333333333333,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.03125,
                0.00411522633744856,
                0.0009765625,
                0.00032,
                0.0001286008230452675,
                0.00005949901826619861,
                0.000030517578125,
                0.00001693508780843029,
                1e-5,
            ],
        )
    }

    pub const COEFFICIENTS: [&[f64]; 2] = [
        &[
            -4.966589067269564,
            1.490465211651151,
            0.01809085785563178,
            0.0006411828603741049,
            0.00003394106712381317,
            2.22285274883805e-6,
            1.663150765624493e-7,
            1.363955215375289e-8,
            1.196519951032723e-9,
            1.105347679367937e-10,
            1.063920338442496e-11,
            1.058883562728972e-12,
            1.083609337480952e-13,
            1.135327693260249e-14,
            1.213783152963716e-15,
            1.320613808023789e-16,
            1.459112360501131e-17,
            1.634217869844814e-18,
            1.852672289768441e-19,
            2.123318565047223e-20,
            2.457541577419491e-21,
            2.869870234244423e-22,
            3.378773608657493e-23,
            4.007699119233637e-24,
            4.786418239646971e-25,
            5.752766868692017e-26,
            6.954895414317454e-27,
            8.454206484650092e-28,
            1.03313810001691e-28,
            1.287310462641722e-29,
            1.563426253067666e-30,
        ],
        &[
            -1.806139007479669,
            1.681324587295308,
            0.03200373602499807,
            0.002090268403752009,
            0.0002207472820853052,
            0.00003023050200740749,
            4.87965792215483e-6,
            8.828039571657697e-7,
            1.737234072616958e-7,
            3.647258546694925e-8,
            8.061730241638102e-9,
            1.858292385182404e-9,
            4.435655199632886e-10,
            1.090479155407217e-10,
            2.749549478059017e-11,
            7.086473092784473e-12,
            1.861827406619737e-12,
            4.975260697332493e-13,
            1.349735725988272e-13,
            3.711552770537859e-14,
            1.033133326091895e-14,
            2.907725991076392e-15,
            8.266412954233447e-16,
            2.371773295079994e-16,
            6.862688839820142e-17,
            2.001215989984341e-17,
            5.878125782811961e-18,
            1.739189052188426e-18,
            5.213141343227987e-19,
            1.687894036959268e-19,
            4.654630658618865e-20,
        ],
    ];

    pub const SPLITS: [f64; 3] = [-7.462481322845981, -3.776599473643765, -0.0907176244415486];
}

pub(crate) mod upper {
    use super::*;

    pub fn lower(x: f64) -> f64 {
        polynomial(
            x,
            &[
                0.0,
                1.,
                0.03125,
                0.00411522633744856,
                0.0009765625,
                0.00032,
                0.0001286008230452675,
                0.00005949901826619861,
                0.000030517578125,
                0.00001693508780843029,
                1e-5,
            ],
        )
    }

    pub fn upper(x: f64) -> f64 {
        if x == 1.0 {
            return 1.03692775514337;
        }

        let xm1 = x - 1.0;
        let ln = (-xm1).ln();
        polynomial(
            xm1,
            &[
                1.03692775514337,
                1.082323233711138,
                0.05986683472422805,
                0.03390163746528666,
                -0.04406602230280489,
                0.03843559547868495,
                -0.03107689113952597,
                0.02469588802778074,
                -0.01960636540836974,
                0.0156276477617174,
                -0.01251904811295835,
            ],
        ) + ln
            * polynomial(
                xm1,
                &[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                    -0.04166666666666667,
                    0.08333333333333333,
                    -0.1180555555555556,
                    0.1458333333333333,
                    -0.1678819444444444,
                    0.1854166666666667,
                    -0.1994268077601411,
                ],
            )
    }

    pub const COEFFICIENTS: [&[f64]; 2] = [
        &[
            0.3114775279726073,
            0.2223439986234518,
            0.0008493302903987073,
            0.00001489560709765279,
            4.97903166173059e-7,
            2.382646385189482e-8,
            1.432321637311617e-9,
            1.00780665351381e-10,
            7.954456562522072e-12,
            6.851799628449823e-13,
            6.321380959608329e-14,
            6.163561252906887e-15,
            6.289159931133679e-16,
            6.665942858343233e-17,
            7.296827962195085e-18,
            8.211677180844573e-19,
            9.46598127050104e-20,
            1.114397168694247e-20,
            1.336550625900499e-21,
            1.629704321580323e-22,
            2.016772735468793e-23,
            2.529232638964153e-24,
            3.210363640607203e-25,
            4.119816802408649e-26,
            5.340060165173258e-27,
            6.985489423719452e-28,
            9.21533714459739e-29,
            1.225208003000495e-29,
            1.641278939641515e-30,
            2.252850975511507e-31,
            3.000590014704409e-32,
        ],
        &[
            0.7636587774437527,
            0.2300465558313104,
            0.001103030738020972,
            0.00003078558255521933,
            1.996467094553584e-6,
            2.146530576668401e-7,
            3.216898120685586e-8,
            6.071299267943309e-9,
            1.354175243073929e-9,
            3.423727073309052e-10,
            9.53632734666409e-11,
            2.867991516522947e-11,
            9.17751746774614e-12,
            3.090790037884877e-12,
            1.086372990949033e-12,
            3.959349719211537e-13,
            1.488541808442396e-13,
            5.748903750629384e-14,
            2.273123594575129e-14,
            9.17612094244927e-15,
            3.772928777397986e-15,
            1.576981844757461e-15,
            6.689251920270314e-16,
            2.875495227224838e-16,
            1.251163036470993e-16,
            5.505610045020406e-17,
            2.450240480039098e-17,
            1.107080519070324e-17,
            5.183259531295659e-18,
            2.741026018656308e-18,
            1.038245807523599e-18,
        ],
    ];

    pub const SPLITS: [f64; 3] = [0.08971388461846102, 0.5253731664207684, 0.961032448223076];
}
